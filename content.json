{"meta":{"title":"Agphp Blog","subtitle":null,"description":null,"author":"Huhijay","url":"https://blog.agphp.com","root":"/"},"pages":[{"title":"分类","date":"2019-11-15T16:17:50.876Z","updated":"2019-11-15T16:17:50.875Z","comments":false,"path":"categories/index.html","permalink":"https://blog.agphp.com/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2019-10-23T09:19:17.000Z","updated":"2019-11-16T03:49:50.626Z","comments":false,"path":"about/index.html","permalink":"https://blog.agphp.com/about/index.html","excerpt":"","text":"后端开发，PHPer"},{"title":"标签","date":"2020-04-30T10:21:31.354Z","updated":"2019-11-15T16:17:50.875Z","comments":false,"path":"tags/index.html","permalink":"https://blog.agphp.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hexo搭建个人博客","slug":"hexo-build-bolg","date":"2019-04-03T10:24:00.000Z","updated":"2020-05-06T08:42:44.649Z","comments":true,"path":"2019/04/03/hexo-build-bolg.html","link":"","permalink":"https://blog.agphp.com/2019/04/03/hexo-build-bolg.html","excerpt":"","text":"准备工作预先安装NodeJS和Git。 基本操作123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# Hexo安装npm install hexo -g# 更新Hexonpm update hexo -g# 初始化hexo init &lt;folder&gt;# 生成网站 hexo generatehexo g# 启动本地服务 hexo serverhexo s# 网站部署三部操作hexo cleanhexo generatehexo deploy# 常用命令汇总# 新建文章hexo new 'postName'# 新建页面hexo new page 'pageName'# 生成静态页面到public目录hexo generate# 启动本地服务hexo server# 将.deploy目录部署到GitHubhexo deploy# 查看帮助hexo help# 查看版本hexo version# 命令的简写hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy","categories":[{"name":"工具","slug":"工具","permalink":"https://blog.agphp.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Node","slug":"Node","permalink":"https://blog.agphp.com/tags/Node/"},{"name":"Hexo","slug":"Hexo","permalink":"https://blog.agphp.com/tags/Hexo/"},{"name":"NPM","slug":"NPM","permalink":"https://blog.agphp.com/tags/NPM/"},{"name":"工具","slug":"工具","permalink":"https://blog.agphp.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"GitHub","slug":"GitHub","permalink":"https://blog.agphp.com/tags/GitHub/"}],"author":"Huhijay"},{"title":"Linux系统安装Nodejs","slug":"install-nodejs","date":"2019-04-02T10:24:00.000Z","updated":"2020-05-06T08:13:51.612Z","comments":true,"path":"2019/04/02/install-nodejs.html","link":"","permalink":"https://blog.agphp.com/2019/04/02/install-nodejs.html","excerpt":"","text":"简单记录nodejs安装过程下载地址： https://nodejs.org/en/download/ ，点击进入选择合适的编译包。 123456789101112131415161718# 检查是否已经安装whereis nodejswhereis nodewhereis npm# 下载wget https://nodejs.org/dist/v12.16.3/node-v12.16.3-linux-x64.tar.xz# 解压tag -xvf node-v12.16.3-darwin-x64.tar.gz# 重命名mv node-v12.16.3-darwin-x64 nodejs# 移动mv nodejs /usr/sbin/# 设置软连接ln -s /usr/sbin/nodejs/bin/node /usr/local/binln -s /usr/sbin/nodejs/bin/npm /usr/local/bin# 检查安装node -vnpm -v","categories":[{"name":"前端","slug":"前端","permalink":"https://blog.agphp.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Node","slug":"Node","permalink":"https://blog.agphp.com/tags/Node/"},{"name":"NPM","slug":"NPM","permalink":"https://blog.agphp.com/tags/NPM/"},{"name":"NodeJS","slug":"NodeJS","permalink":"https://blog.agphp.com/tags/NodeJS/"}],"author":"Huhijay"},{"title":"PHP中的浮点数问题","slug":"php-float","date":"2018-10-26T17:24:00.000Z","updated":"2019-11-16T03:49:50.626Z","comments":true,"path":"2018/10/27/php-float.html","link":"","permalink":"https://blog.agphp.com/2018/10/27/php-float.html","excerpt":"","text":"如果用php的+-*/计算浮点数的时候，可能会遇到一些计算结果错误的问题，比如下面这种情况： 1234echo intval(0.58*100);// 57echo (int) (0.58*100);// 57echo round(0.58*100); // 58var_dump((0.1 + 0.7) == 0.8); // false 之所以出现上面的问题是因为PHP 是使用二进制表示浮点数的，这是支持二进制浮点数运算（绝大部分都是 IEEE-745浮点数表示法 的实现）的系统都存在一个现象（具体原因，想要知道的朋友可以点击这里查看）。 所以在浮点数转换整数的时候（比如微信支付接口支付金额需转换成单位）建议可以使用round()函数，或者计算的时候使用BC高精度函数。 常用的高精度函数如下： 12345678910111213141516171819 bcadd — 将两个高精度数字相加 bccomp — 比较两个高精度数字，返回-1, 0, 1 bcdiv — 将两个高精度数字相除 bcmod — 求高精度数字余数 bcmul — 将两个高精度数字相乘 bcpow — 求高精度数字乘方 bcpowmod — 求高精度数字乘方求模，数论里非常常用 bcscale — 配置默认小数点位数，相当于就是Linux bc中的”scale=” bcsqrt — 求高精度数字平方根 bcsub — 将两个高精度数字相减 使用方法举例如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576/** * 两个高精度数比较 * * @access global * @param float $left * @param float $right * @param int $scale 精确到的小数点位数 * * @return int $left==$right 返回 0 | $left&lt;$right 返回 -1 | $left&gt;$right 返回 1 */var_dump(bccomp($left=4.45, $right=5.54, 2));// -1 /** * 两个高精度数相加 * * @access global * @param float $left * @param float $right * @param int $scale 精确到的小数点位数 * * @return string */var_dump(bcadd($left=1.0321456, $right=0.0243456, 2));//1.05 /** * 两个高精度数相减 * * @access global * @param float $left * @param float $right * @param int $scale 精确到的小数点位数 * * @return string */var_dump(bcsub($left=1.0321456, $right=3.0123456, 2));//-1.98 /** * 两个高精度数相除 * * @access global * @param float $left * @param float $right * @param int $scale 精确到的小数点位数 * * @return string */var_dump(bcdiv($left=6, $right=5, 2));//1.20 /** * 两个高精度数相乘 * * @access global * @param float $left * @param float $right * @param int $scale 精确到的小数点位数 * * @return string */var_dump(bcmul($left=3.1415926, $right=2.4569874566, 2));//7.71 /** * 设置bc函数的小数点位数 * * @access global * @param int $scale 精确到的小数点位数 * * @return void */ bcscale(3);var_dump(bcdiv('105', '6.55957')); //16.007","categories":[{"name":"PHP","slug":"PHP","permalink":"https://blog.agphp.com/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.agphp.com/tags/PHP/"}],"author":"Huhijay"},{"title":"PHP常用函数-身份证格式校验","slug":"php-func-identity-verify","date":"2017-10-25T10:06:00.000Z","updated":"2019-11-16T03:49:50.626Z","comments":true,"path":"2017/10/25/php-func-identity-verify.html","link":"","permalink":"https://blog.agphp.com/2017/10/25/php-func-identity-verify.html","excerpt":"","text":"PHP常用函数-身份证格式校验123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143下面是身份证编码各个部分的含义://=============新的18位身份证号码各位的含义:=======================//1-2位省、自治区、直辖市代码；11-65//3-4位地级市、盟、自治州代码；//5-6位县、县级市、区代码；//7-14位出生年月日，比如19670401代表1967年4月1日；//15-17位为顺序号，其中17位男为单数，女为双数；//18位为校验码，0-9和X，由公式随机产生。//举例：//130503 19670401 0012这个身份证号的含义: 13为河北，05为邢台，03为桥西区，出生日期为1967年4月1日，顺序号为001，2为验证码//===========15位身份证号码各位的含义:=======================//1-2位省、自治区、直辖市代码；//3-4位地级市、盟、自治州代码；//5-6位县、县级市、区代码；//7-12位出生年月日,比如670401代表1967年4月1日,这是和18位号码的第一个区别；//13-15位为顺序号，其中15位男为单数，女为双数；//与18位身份证号的第二个区别：没有最后一位的验证码。//举例：//130503 670401 001的含义; 13为河北，05为邢台，03为桥西区，出生日期为1967年4月1日，顺序号为001。class IdentityCard&#123; /** * 校验身份证号是否合法 * @param string $num 待校验的身份证号 * @return bool */ public static function isValid(string $num)&#123; //老身份证长度15位，新身份证长度18位 $length = strlen($num); if ($length == 15) &#123; //如果是15位身份证 //15位身份证没有字母 if (!is_numeric($num)) &#123; return false; &#125; // 省市县（6位） $areaNum = substr($num, 0, 6); // 出生年月（6位） $dateNum = substr($num, 6, 6); &#125; else if ($length == 18) &#123; //如果是18位身份证 //基本格式校验 if (!preg_match('/^\\d&#123;17&#125;[0-9xX]$/', $num)) &#123; return false; &#125; // 省市县（6位） $areaNum = substr($num, 0, 6); // 出生年月日（8位） $dateNum = substr($num, 6, 8); &#125; else &#123; //假身份证 return false; &#125; //验证地区 if (!self::isAreaCodeValid($areaNum)) &#123; return false; &#125; //验证日期 if (!self::isDateValid($dateNum)) &#123; return false; &#125; //验证最后一位 if (!self::isVerifyCodeValid($num)) &#123; return false; &#125; return true; &#125; /** * 省市自治区校验 * @param string $area 省、直辖市代码 * @return bool */ private static function isAreaCodeValid(string $area) &#123; $provinceCode = substr($area, 0, 2); // 根据GB/T2260—999，省市代码11到65 if (11 &lt;= $provinceCode &amp;&amp; $provinceCode &lt;= 65) &#123; return true; &#125; else &#123; return false; &#125; &#125; /** * 验证出生日期合法性 * @param string $date 日期 * @return bool */ private static function isDateValid(string $date) &#123; if (strlen($date) == 6) &#123; //15位身份证号没有年份，这里拼上年份 $date = '19'.$date; &#125; $year = intval(substr($date, 0, 4)); $month = intval(substr($date, 4, 2)); $day = intval(substr($date, 6, 2)); //日期基本格式校验 if (!checkdate($month, $day, $year)) &#123; return false; &#125; //日期格式正确，但是逻辑存在问题(如:年份大于当前年) $currYear = date('Y'); if ($year &gt; $currYear) &#123; return false; &#125; return true; &#125; /** * 验证18位身份证最后一位 * @param string $num 待校验的身份证号 * @return bool */ private static function isVerifyCodeValid(string $num)&#123; if (strlen($num) == 18) &#123; $factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]; $tokens = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2']; $checkSum = 0; for ($i = 0; $i &lt; 17; $i++) &#123; $checkSum += intval($num&#123;$i&#125;) * $factor[$i]; &#125; $mod = $checkSum % 11; $token = $tokens[$mod]; $lastChar = strtoupper($num&#123;17&#125;); if ($lastChar != $token) &#123; return false; &#125; &#125; return true; &#125;&#125;","categories":[{"name":"PHP","slug":"PHP","permalink":"https://blog.agphp.com/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.agphp.com/tags/PHP/"}],"author":"Huhijay"},{"title":"表单控制输入数字","slug":"input-limit-num","date":"2017-10-23T11:04:00.000Z","updated":"2019-11-16T03:49:50.625Z","comments":true,"path":"2017/10/23/input-limit-num.html","link":"","permalink":"https://blog.agphp.com/2017/10/23/input-limit-num.html","excerpt":"","text":"前端表单限制仅可输入数字: 12345678910111213141516171819&lt;input type=\"text\" name=\"number\" onkeyup=\"floatNum(this)\" /&gt;// 数字校验 2位小数function floatNum(obj)&#123; obj.value = obj.value.replace(/[^\\d.]/g,\"\"); //清除\"数字\"和\".\"以外的字符 obj.value = obj.value.replace(/^\\./g,\"\"); //验证第一个字符是数字 obj.value = obj.value.replace(/\\.&#123;2,&#125;/g,\".\"); //只保留第一个, 清除多余的 obj.value = obj.value.replace(\".\",\"$#$\").replace(/\\./g,\"\").replace(\"$#$\",\".\"); obj.value = obj.value.replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/,'$1$2.$3'); //只能输入两个小数&#125;// 数字校验 2位小数 允许负值function floatNum2(obj)&#123; obj.value = obj.value.replace(/[^\\-\\d.]/g,\"\"); //清除\"数字\"和\".\"以外的字符 obj.value = obj.value.replace(/^\\./g,\"\"); //验证第一个字符是数字 obj.value = obj.value.replace(/\\-&#123;2,&#125;/g,\"-\"); //只保留第一个, 清除多余的 obj.value = obj.value.replace(/\\.&#123;2,&#125;/g,\".\"); //只保留第一个, 清除多余的 obj.value = obj.value.replace(\".\",\"$#$\").replace(/\\./g,\"\").replace(\"$#$\",\".\"); obj.value = obj.value.replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/,'$1$2.$3'); //只能输入两个小数&#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://blog.agphp.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.agphp.com/tags/JavaScript/"}],"author":"Huhijay"},{"title":"Layui5.0设置最大最小值","slug":"layui-set-max-min","date":"2017-10-23T10:50:39.000Z","updated":"2019-11-16T03:49:50.625Z","comments":true,"path":"2017/10/23/layui-set-max-min.html","link":"","permalink":"https://blog.agphp.com/2017/10/23/layui-set-max-min.html","excerpt":"","text":"由于新版的laydate时间插件在初始化时已设置时间最大最小范围，且生成对象，无法重新渲染改变其日期最大最小值。 有网友经试验贴出如下方法可达成目的，故做记录。 12345678910111213141516171819202122232425262728//开始时间var startDate = laydate.render(&#123; elem: '#start', done: function (value, date) &#123; endDate.config.min = &#123; year: date.year, month: date.month-1, date: date.date, hours: date.hours, minutes: date.minutes, seconds: date.seconds &#125; &#125;&#125;);//结束时间var endDate = laydate.render(&#123; elem: '#end', done: function (value, date) &#123; startDate.config.max = &#123; year: date.year, month: date.month-1, date: date.date, hours: date.hours, minutes: date.minutes, seconds: date.seconds &#125; &#125;&#125;);","categories":[{"name":"前端","slug":"前端","permalink":"https://blog.agphp.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.agphp.com/tags/JavaScript/"},{"name":"Layui","slug":"Layui","permalink":"https://blog.agphp.com/tags/Layui/"}],"author":"Huhijay"},{"title":"MySQL：数据存在则更新，不存在则插入","slug":"mysql-insert-update","date":"2017-05-23T09:18:00.000Z","updated":"2019-11-16T03:49:50.625Z","comments":true,"path":"2017/05/23/mysql-insert-update.html","link":"","permalink":"https://blog.agphp.com/2017/05/23/mysql-insert-update.html","excerpt":"","text":"前提：表结构存在主键或唯一索引，插入数据包含主键或唯一索引而导致记录重复插入失败。 单条记录更新插入： 12INSERT INTO table_name (a,b,c) VALUES (1,2,3)ON DUPLICATE KEY UPDATE a=1,b=2,c=3; 多条记录批量更新插入：： 12INSERT INTO table_name (a,b,c) VALUES (1,2,3),(4,5,6) ON DUPLICATE KEY UPDATE a=VALUES(a),b=VALUES(b),c=VALUES(c);","categories":[{"name":"数据库","slug":"数据库","permalink":"https://blog.agphp.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://blog.agphp.com/tags/MySQL/"}],"author":"Huhijay"},{"title":"Xshell配色方案推荐","slug":"xshell-mycolor","date":"2017-04-28T08:25:00.000Z","updated":"2019-11-16T03:49:50.626Z","comments":true,"path":"2017/04/28/xshell-mycolor.html","link":"","permalink":"https://blog.agphp.com/2017/04/28/xshell-mycolor.html","excerpt":"","text":"使用方法 1.新建mycolor.xcs文件（名字可以随意修改） 2.复制粘贴如下代码，将文件导入，修改自己喜欢的字体即可 1234567891011121314151617181920212223[mycolor]text=00ff80cyan(bold)=00fffftext(bold)=e9e9e9magenta=c000c0green=80ff00green(bold)=3c5a38background=042028cyan=00c0c0red(bold)=ff0000yellow=c0c000magenta(bold)=ff00ffyellow(bold)=ffff00red=ff4500white=c0c0c0blue(bold)=1e90ffwhite(bold)=fdf6e3black=000000blue=00bfffblack(bold)=808080[Names]name0=mycolorcount=1","categories":[{"name":"工具","slug":"工具","permalink":"https://blog.agphp.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://blog.agphp.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"Xshell","slug":"Xshell","permalink":"https://blog.agphp.com/tags/Xshell/"}],"author":"Huhijay"}]}